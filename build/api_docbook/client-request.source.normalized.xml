<?xml version="1.0" encoding="UTF-8"?>
<file>
   <class title="ClientRequest">
      <constructor>
         <param name="options" type="union">
            <option type="Object"/>
            <option type="String"/>
            <param optional="true" name="method" type="String"/>
            <param optional="true" name="url" type="String"/>
            <param optional="true" name="session" type="Object"/>
            <param optional="true" name="partition" type="String"/>
            <param optional="true" name="protocol" type="String"/>
            <param optional="true" name="host" type="String"/>
            <param optional="true" name="hostname" type="String"/>
            <param optional="true" name="port" type="Integer"/>
            <param optional="true" name="path" type="String"/>
         </param>
      </constructor>
      <properties type="instance">
         <property name="chunkedEncoding" type="chunkedEncoding">
            <description>
               <para>A Boolean specifying whether the request will use HTTP chunked transfer encoding or not. Defaults to false. The property is readable and writable, however it can be set only before the first write operation as the HTTP headers are not yet put on the wire. Trying to set the chunkedEncoding property after the first write will throw an error.</para>
               <para>Using chunked encoding is strongly recommended if you need to send a large request body as data will be streamed in small chunks instead of being internally buffered inside Electron process memory.</para>
            </description>
         </property>
      </properties>
      <methods type="instance">
         <method name="setHeader">
            <param name="name" type="String"/>
            <param name="value" type="String"/>
            <description>
               <para>Adds an extra HTTP header. The header name will issued as it is without lowercasing. It can be called only before first write. Calling this method after the first write will throw an error.</para>
            </description>
         </method>
         <method name="getHeader">
            <param name="name" type="String"/>
            <returns type="String">
               <description>
                  <para/>
               </description>
            </returns>
            <description/>
         </method>
         <method name="removeHeader">
            <param name="name" type="String"/>
            <description>
               <para>Removes a previously set extra header name. This method can be called only before first write. Trying to call it after the first write will throw an error.</para>
            </description>
         </method>
         <method name="write">
            <param name="chunk" type="union">
               <option type="String"/>
               <option type="Buffer"/>
            </param>
            <param optional="true" name="encoding" type="String"/>
            <param optional="true" name="callback" type="Function"/>
            <description>
               <para>callback is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API. It is called asynchronously in the next tick after chunk content have been delivered to the Chromium networking layer. Contrary to the Node.js implementation, it is not guaranteed that chunk content have been flushed on the wire before callback is called.</para>
               <para>Adds a chunk of data to the request body. The first write operation may cause the request headers to be issued on the wire. After the first write operation, it is not allowed to add or remove a custom header.</para>
            </description>
         </method>
         <method name="end">
            <param optional="true" name="chunk" type="union">
               <option type="String"/>
               <option type="Buffer"/>
            </param>
            <param optional="true" name="encoding" type="String"/>
            <param optional="true" name="callback" type="Function"/>
            <description>
               <para>Sends the last chunk of the request data. Subsequent write or end operations will not be allowed. The finish event is emitted just after the end operation.</para>
            </description>
         </method>
         <method name="abort">
            <description>
               <para>Cancels an ongoing HTTP transaction. If the request has already emitted the close event, the abort operation will have no effect. Otherwise an ongoing event will emit abort and close events. Additionally, if there is an ongoing response object,it will emit the aborted event.</para>
            </description>
         </method>
      </methods>
   </class>
</file>
